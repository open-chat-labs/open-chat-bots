import type { BlobReference, AuthToken } from "../domain";
import type { AccessGate, AccessGateConfig } from "../domain/access";
import type { GroupPermissions, MessagePermissions, PermissionRole } from "../domain/permissions";
import type { AuthToken as ApiAuthToken, BlobReference as ApiBlobReference, AccessGate as ApiAccessGate, AccessGateNonComposite as ApiAccessGateNonComposite, AccessGateConfig as ApiAccessGateConfig, MessagePermissions as ApiMessagePermissions, GroupPermissionRole as ApiPermissionRole, GroupPermissions as ApiGroupPermissions } from "../typebox/typebox";
export declare function apiAuthToken(auth: AuthToken): ApiAuthToken;
export declare function apiBlobReference(domain: BlobReference): ApiBlobReference;
export declare function apiAccessGateConfig(domain: AccessGateConfig): ApiAccessGateConfig;
export declare function apiAccessGate(domain: AccessGate): ApiAccessGate;
export declare function apiLeafAccessGate(domain: AccessGate): ApiAccessGateNonComposite;
export declare function apiPermissionRole(domain: PermissionRole): ApiPermissionRole;
export declare function apiMessagePermissions(domain: MessagePermissions): ApiMessagePermissions;
export declare function apiGroupPermissions(domain: GroupPermissions): ApiGroupPermissions;
export declare function apiOptional<A, B>(domain: A | undefined, mapper: (a: A) => B): B | undefined;
export declare function optional<A, B>(api: [] | [A], mapper: (a: A) => B): B | undefined;
export declare function identity<A>(a: A): A;
export declare function principalBytesToString(bytes: Uint8Array): string;
export declare function principalStringToBytes(principal: string): Uint8Array;
