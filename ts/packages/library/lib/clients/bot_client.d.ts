import { HttpAgent } from "@dfinity/agent";
import { CandidService } from "../utils/candidService";
import type { BotCreateChannelResponse, BotSendMessageResponse } from "../services/bot_gateway/candid/types";
import type { Chat } from "../services/storageIndex/candid/types";
import { FileMessage, ImageMessage, TextMessage, type AuthToken, type BotActionChatScope, type BotActionCommunityScope, type BotActionScope, type BotClientConfig, type BotCommand, type BotCommandArg, type Message } from "../domain";
import type { Channel } from "../domain/channel";
export declare class BotClient extends CandidService {
    #private;
    constructor(agent: HttpAgent, env: BotClientConfig, auth: AuthToken);
    get command(): BotCommand | undefined;
    sendMessage<M>(message: Message<M>): Promise<BotSendMessageResponse>;
    createChannel(channel: Channel): Promise<BotCreateChannelResponse>;
    get scope(): BotActionScope;
    get chatScope(): BotActionChatScope | undefined;
    get communityScope(): BotActionCommunityScope | undefined;
    get messageId(): bigint | undefined;
    stringArg(name: string): string | undefined;
    booleanArg(name: string): boolean | undefined;
    numberArg(name: string): number | undefined;
    userArg(name: string): string | undefined;
    get threadRootMessageId(): number | undefined | null;
    get chatId(): Chat | undefined;
    get botId(): string;
    get commandArgs(): BotCommandArg[];
    get commandName(): string | undefined;
    get initiator(): string | undefined;
    createTextMessage(text: string): Promise<TextMessage>;
    createImageMessage(imageData: Uint8Array, mimeType: string, width: number, height: number): Promise<ImageMessage>;
    createFileMessage(name: string, data: Uint8Array, mimeType: string, fileSize: number): Promise<FileMessage>;
}
export declare function isChatScope(scope: BotActionScope): scope is BotActionChatScope;
export declare function isCommunityScope(scope: BotActionScope): scope is BotActionCommunityScope;
